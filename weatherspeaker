#!/usr/bin/env bash
set -e
VERSION="1.2.0"
HERE=$(cd "$(dirname "$0")" && pwd)

ESPEAK_BIN=espeak

display_usage(){
	echo "weatherspeaker - Command line weather forecast speaker"
	echo "Options:"
	echo "	  [--days | -d] <nb_of_days>         Return weather forecast for the day (tomorrow + <nb_of_days>), default: 1."	 	     	
	echo "    [--config | -c] <path>             Use a custom configuration file located in <path>." 
	echo "    [--trace | --verbose]              Activate tracing."
	echo "    [--help | -h]                      Show this help and exit."
	echo "    [--version | -v]                   Display the version of the program and exit."
	echo "    [init]                             Initialize and configure your personal parameters (API Key and city ID)."
	echo ""
	echo "    Github repository: 		     http://gihthub.com/marrakchino/weatherspeaker"
	exit 0
}

display_version(){
	echo "weatherspeaker - Version ${VERSION}"
	exit 0
}

find_min_temp(){
	for temp in "$@"; do echo "$temp"; done| sort -n| head -n 1
}

find_max_temp(){
	for temp in "$@"; do echo "$temp"; done| sort -nr| head -n 1
}

# returns the city ID based on its name from the official city list
# $1: city name
get_city_ID(){
	local city_name="$1"
	# 'tac |tac' is used to avoid grep error 23 due to non writing completeness (curl) (credits to https://goo.gl/l5g13p)
	parsed_id=$(curl -sS http://www.openweathermap.org/help/city_list.txt| tac| tac|grep -wsm 1 "${city_name}"|sed 's/\s.*$//')
	echo "${parsed_id}"
}

# returns the city coordinates based on the ip address
# <latitude> <longitude>
# (credits to http://askubuntu.com/a/430864)
get_coordinates_from_ip(){
	curl -s http://whatismycountry.com/ | sed -n 's/.*Coordinates \(.*\)<.*/\1/p'	
}

# returns the city and country name based on the user's ip address
get_city_from_ip(){
	curl -s http://whatismycountry.com/ | sed -n 's|.*> *\(.*\)</h3>|\1|p'|sed -e 's/,.*//g'
}

# $1: item to replace (key, id)
# $2: new value
replace_conf(){
	sed -i "s/$1.*$/$1:$2/" "$CONFIG_FILE"
}

init(){
	if grep -s -q "key" "${CONFIG_FILE}"; then
		read -r -p "API Key already exists in ${CONFIG_FILE}, overwrite it? [y]es, [n]o " action
		case "${action}" in
			y)
				read -r -p "New API key: " new_api_key
				replace_conf "key" "${new_api_key}"
				echo "[API KEY] Overwrote API key in ${CONFIG_FILE}"
				;;
			*)
				;;
		esac
	else	
		echo "key:${api_key}" >> "${CONFIG_FILE}"
		case "$?" in
			0)
				echo "[API Key] Done";;
			*)
				echo "[API Key] Error when writing"
				return 1
				;;
		esac
	fi

	if grep -s -q "id" "${CONFIG_FILE}"; then
		read -r -p "Default city ID already exists in ${CONFIG_FILE}, overwrite it? [y]es, [n]o " action
		case "${action}" in
			y)
				read -r -p "New city ID: " new_city_id
				replace_conf "id" "${new_city_id}"
				echo "[City ID] Overwrote city ID in ${CONFIG_FILE}"
				;;
			*)
				;;
		esac
	else
		echo "id:${city_id}" >> "${CONFIG_FILE}"
		case "$?" in
			0)
				echo "[City ID] Done";;
			*)
				echo "[City ID] Error when writing"
				return 1
				;;
		esac
	fi
}

CONFIG_FILE="${HERE}/config/.weatherspeaker.conf"
day_offset=1

# Command line parsing
while (( "$#" )); do
	case "$1" in
		--trace| --verbose)
			set -x
			shift 1 || break
			;;
			
		--help| -h)
			display_usage
			;;
			
		--version| -v)
			display_version
			;;
			
		init)
			if [[ -f "${CONFIG_FILE}" ]]; then
				api_key=$(grep -s "key" "${CONFIG_FILE}"| sed -e 's/.*key://g')
			else
				api_key=${OPENWEATHERMAP_APIKEY}
			fi

			if [[ -z "${api_key}" || "${api_key}" == "${OPENWEATHERMAP_APIKEY}" ]]; then 
				read -r -e -p "Enter your API key: " api_key
			fi

			if [[ -f "${CONFIG_FILE}" ]]; then
				city_id=$(grep -s "id" "${CONFIG_FILE}"| sed -e 's/.*id://g')
			else
				city_id="${WTSPEAK_DEFAULT_CITY_ID}"
			fi

			if [[ -z "${city_id}" || "${city_id}" == "${WTSPEAK_DEFAULT_CITY_ID}" ]]; then 
				read -r -e -p "Enter your city ID: " city_id
			fi
			init
			exit $?
			;;

		--config| -c)
			CONFIG_FILE="$2"
			shift 2 || break
			;;

		--days| -d)
			day_offset="$2"
			shift 2 || break
			;;

		*)
			shift 1 || break
			;;
	esac
done

# Values by default
api_key="${OPENWEATHERMAP_APIKEY}"
city_id="${WTSPEAK_DEFAULT_CITY_ID}"
if [[ -f "${CONFIG_FILE}" ]]; then
	api_key=$(grep -s "key" "${CONFIG_FILE}"| sed -e 's/.*key://g')
	city_id=$(grep -s "id" "$CONFIG_FILE"| sed -e 's/.*id://g')
	
	# No API key at all found.
	if [[ -z "${api_key}" ]]; then
		echo "No API key found. You can go get one from: http://openweathermap.org/api"
		exit 1
	fi

	# No city ID provided, let's handle this.
	if [[ -z "${city_id}" ]]; then
		city_name=$(get_city_from_ip)
		city_id=$(get_city_ID "$city_name")
	fi
fi

espeak_data_path="$(${ESPEAK_BIN} --version| sed 's/.*Data at: //g')"
if [[ ! -f "${espeak_data_path}/voices/female_custom_voice" ]]; then
	# copy the custom voice file if it's not already in the expected directory
	cp "${HERE}/res/female_custom_voice" "${espeak_data_path}/voices/female_custom_voice"
fi
ESPEAK_BIN="${ESPEAK_BIN} -v female_custom_voice"


UNITS=metric # Default:Kelvin, Metric:Celsius, Imperial:Fahrenheit
WEATHER_URL="http://api.openweathermap.org/data/2.5/forecast?id=${city_id}&APPID=${api_key}&units=${UNITS}"

current_hour_of_the_day=$(date +%H)
# The data fetched from OpenWeatherMap contain weather information
# for every 3 coming hours. Which means, if you for example make a request
# at 7pm, you'll get weather data for 21:00, 00:00, 03:00, 06:00, ... and so on
# for approximately 5 days (35 entries). Every day is therefore divided into
# 8 intervals of 3 hours (0-3-6-9-12-15-17-18-21-24).
# day_interval=$(((((((${current_hour_of_the_day}) * 7)) / 24)) + 2))
desired_date=$(date -d "+${day_offset} days" +%Y-%m-%d)

weather_forecast_script=""
if [[ "${day_offset}" -eq 1 ]]; then
	weather_forecast_script="Tomorrow, "
else 
	weather_forecast_script="In ${day_offset} days, "
fi
weather_forecast_script="${weather_forecast_script}the weather will be "

# This function adds an adjective succinctly describing the weather
# it's possible to use if/else on the resulting code id 
adjectify_description(){
	# remove the double-quotes
	weather_main_description="${weather_main_description//\"}"

	if [[ "$weather_main_description" == "Clear" ]]; then
		weather_forecast_script="${weather_forecast_script}clear."

	elif [[ "$weather_main_description" == "Rain" ]]; then
		weather_forecast_script="${weather_forecast_script}rainy."

	elif [[ "$weather_main_description" == "Snow" ]]; then
		weather_forecast_script="${weather_forecast_script}snowy."

	elif [[ "$weather_main_description" == "Thunderstorm" ]]; then
		weather_forecast_script="${weather_forecast_script}stormy."
	
	elif [[ "$weather_main_description" == "Drizzle" ]]; then
		weather_forecast_script="${weather_forecast_script}drizzly."
	
	elif [[ "$weather_main_description" == "Clouds" ]]; then
		weather_forecast_script="${weather_forecast_script}cloudy."
	
	elif [[ "$weather_main_description" == "Atmosphere" ]]; then
		weather_forecast_script="${weather_forecast_script}atmospheric."
	
	elif [[ "$weather_main_description" == "Extreme" ]]; then
		weather_forecast_script="${weather_forecast_script}extreme."
	else
		weather_forecast_script="${weather_forecast_script}normal."
	fi
}

temperaturify_description(){
	weather_forecast_script="${weather_forecast_script} Temperatures will range from ${weather_min_temp} to ${weather_max_temp} degrees."
}

# Fetch weather from openweathermap
curl_weather(){
	curled_data=$(curl -s "${WEATHER_URL}")

	desired_date_first_entry=$(echo "${curled_data}"| jq '.list[] .dt_txt'| 
	grep -nm 1 "${desired_date}"| cut -f1 -d:)

	weather_data_for_desired_date=$(echo "${curled_data}"| 
	jq ".list[$((desired_date_first_entry - 1)):$((desired_date_first_entry + 7))][]")
	
	weather_main_description=$(echo "${curled_data}"|
	jq ".list[$((desired_date_first_entry + 1))]| .weather[] .main")

	weather_min_temp=$(find_min_temp "$(echo "${weather_data_for_desired_date}"| jq ".main .temp")")
	weather_max_temp=$(find_max_temp "$(echo "${weather_data_for_desired_date}"| jq ".main .temp")")
}

curl_weather
adjectify_description
temperaturify_description

# Don't speak unless the information has been correctly fetched 
if [[ "${weather_min_temp}" != null && "${weather_max_temp}" != null ]]; then
	${ESPEAK_BIN} "${weather_forecast_script}" &
fi
