#!/usr/bin/env bash

display_usage(){
	echo "Usage:"
	echo " weatherspeaker "
	echo "    [--trace|--verbose]  "
	echo " "
	exit 0
}

display_version(){
	echo "weatherspeaker - Version 1.0"
	exit 0
}

# Exit if the environment variables are not defined
# TODO: Prompt the user for the API key and defaut city id/city name if the 
# environment variables are not defined
[ -z "$OPENWEATHERMAP_APIKEY" ] && echo "API Key not defined" && exit 1; 
# read -e -p 'Enter your OpenWeatherMap API key: ' "$OPENWEATHERMAP_APIKEY"
[ -z "$WTSPEAK_DEFAULT_CITY_ID" ] && echo "Default city ID not defined" && exit 1;

ESPEAK=espeak
# making assumptions...
# TODO: fix this
if [ -f "/usr/lib/x86_64-linux-gnu/espeak-data/voices/female_custom_voices" ]; then
	ESPEAk="$ESPEAK -v female_custom_voice"
fi

UNITS=metric # Default:Kelvin, Metric:Celsius, Imperial:Fahrenheit

WEATHER_URL="http://api.openweathermap.org/data/2.5/forecast?id=$WTSPEAK_DEFAULT_CITY_ID&APPID=$OPENWEATHERMAP_APIKEY&units=$UNITS"

# Potential values of the field weather[].main
# see: http://openweathermap.org/weather-conditions
WEATHER_MAIN=(
	'Clear'
	'Rain'
	'Snow'
	'Thunderstorm'
	'Drizzle'
	'Clouds'
	'Atmosphere'
	'Extreme'
)

current_hour_of_the_day=$(date +%H)

# (The following expression could be a nominee for the most parenthesized expression award).
# The data fetched from OpenWeatherMap contains weather information
# for every 3 coming hours. Which means, if you fore example make a request
# at 7pm, you'll get weather data for 21:00, 00:00, 03:00, 06:00, ... and so on
# for approximately 5 days (35 entries). Every day is therefore divided into
# 8 intervals of 3 hours (0-3-6-9-12-15-17-18-21-24).
day_interval=$((((((($current_hour_of_the_day) * 7)) / 24)) + 2))
if [ "$current_hour_of_the_day" -ge 12 ]; then
	afternoon=0
else
	afternoon=1
fi

# Command line parsing
while (( "$#" )); do
	case "$1" in
		--trace| --verbose)
			set -x
			shift 1 || break
			;;
			
# 		--day| -d)
# 			day_offset="$2"
# 			shift 2 || break
# 			;;
			
		--help| -h)
			display_usage
			;;
			
		--version| -v)
			display_version
			;;
			
# 		init)
# 			shift 1 || break
# 			;;

		*)
			shift 1 || break
			;;
			
	esac
done

weather_forecast_script=""
if [ "$afternoon" -gt 0 ]; then
	weather_forecast_script="This afternoon, the weather will be "
else 
	weather_forecast_script="Tomorrow, the weather will be "
fi

# This function adds an adjective succinctly describing the weather
# it's possible to use if/else on the resulting code id 
adjectify_description(){
	# remove the double-quotes
	weather_main_description="${weather_main_description//\"}"

	if [ "$weather_main_description" == "Clear" ]; then
		weather_forecast_script="$weather_forecast_script clear."

	elif [ "$weather_main_description" == "Rain" ]; then
		weather_forecast_script="$weather_forecast_script rainy."

	elif [ "$weather_main_description" == "Snow" ]; then
		weather_forecast_script="$weather_forecast_script snowy."

	elif [ "$weather_main_description" == "Thunderstorm" ]; then
		weather_forecast_script="$weather_forecast_script stormy."
	
	elif [ "$weather_main_description" == "Drizzle" ]; then
		weather_forecast_script="$weather_forecast_script drizzly."
	
	elif [ "$weather_main_description" == "Clouds" ]; then
		weather_forecast_script="$weather_forecast_script cloudy."
	
	elif [ "$weather_main_description" == "Atmosphere" ]; then
		weather_forecast_script="$weather_forecast_script atmospheric."
	
	elif [ "$weather_main_description" == "Extreme" ]; then
		weather_forecast_script="$weather_forecast_script extreme."
	fi
}

temperaturify_description(){
	weather_forecast_script="$weather_forecast_script Temperatures will\
	range from $weather_morning_temp degrees in the morning to\
	$weather_afternoon_temp degrees in the afternoon."
}

# Fetch weather from openweathermap
# $1 day offset: 0 means today, 1 tomorrow... etc
# TODO: factorize the calls to curl hereafter
curl_weather(){
	day_offset="$day_interval"
# 	day_offset="$1"
	weather_main_description=$(curl -s "$WEATHER_URL"|
	jq ".list[((11 - $day_offset))]| .weather[] .main")
	
	weather_full_description=$(curl -s "$WEATHER_URL"|
	jq ".list[$((11 - $day_offset))]| .weather[] .description")
	
	weather_code=$(curl -s "$WEATHER_URL"| jq '.cod')

	weather_morning_temp=$(curl -s "$WEATHER_URL"|
	jq ".list[((11 - $day_offset))]| .main.temp")

	weather_afternoon_temp=$(curl -s "$WEATHER_URL"|
	jq ".list[((11 - $day_offset + 2))]| .main.temp")

}

curl_weather 1
adjectify_description
temperaturify_description
$ESPEAK "$weather_forecast_script"
