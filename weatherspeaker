#!/usr/bin/env bash

HERE=$(cd "$(dirname "$0")" && pwd)

if [ -f "$HERE/config/.openweathermap_apikey" ]; then
	api_key=$(sed -n '1p' < "$HERE/config/.openweathermap_apikey")
else
	api_key="$OPENWEATHERMAP_APIKEY"
fi

if test -f "$HERE/config/.default_city_id"; then
	city_id=$(sed -n '1p' < "$HERE/config/.default_city_id")
else
	city_id="$WTSPEAK_DEFAULT_CITY_ID"
fi

UNITS=metric # Default:Kelvin, Metric:Celsius, Imperial:Fahrenheit
WEATHER_URL="http://api.openweathermap.org/data/2.5/forecast?id=$city_id&APPID=$api_key&units=$UNITS"

ESPEAK=espeak
# making assumptions... TODO: fix this
if [ -f "/usr/lib/x86_64-linux-gnu/espeak-data/voices/female_custom_voice" ]; then
	ESPEAK="$ESPEAK -v female_custom_voice"
fi

current_hour_of_the_day=$(date +%H)

# (The following expression could be a nominee for the most parenthesized expression award).
# The data fetched from OpenWeatherMap contains weather information
# for every 3 coming hours. Which means, if you fore example make a request
# at 7pm, you'll get weather data for 21:00, 00:00, 03:00, 06:00, ... and so on
# for approximately 5 days (35 entries). Every day is therefore divided into
# 8 intervals of 3 hours (0-3-6-9-12-15-17-18-21-24).
day_interval=$((((((($current_hour_of_the_day) * 7)) / 24)) + 2))
if [ "$current_hour_of_the_day" -ge 12 ]; then
	afternoon=0
else
	afternoon=1
fi

display_usage(){
	echo "Weatherspeaker - Command line weather forecast speaker"
	echo "Options:"
	echo "    [--trace | --verbose]     Activate tracing."
	echo "    [--help | -h]             Show this help and exit."
	echo "    [--version | -v]          Display the version of the program and exit."
	echo "    [init]                    Initialize and configure your personal parameters (API Key and city ID)."
	echo "Github repository: 	    http://gihthub.com/marrakchino/weatherspeaker"
	exit 0
}

display_version(){
	echo "weatherspeaker - Version 1.0"
	exit 0
}

init(){
	echo "$api_key" > "$HERE/config/.openweathermap_apikey"
	case "$?" in
		0)
			echo "[API Key] Done";;
		*)
			echo "[API Key] Error when writing"
			return 1
			;;
	esac

	echo "$city_id" > "$HERE/config/.default_city_id"
	case "$?" in
		0)
			echo "[City ID] Done";;
		*)
			echo "[City ID] Error when writing"
			return 1
			;;
	esac
}

# Command line parsing
while (( "$#" )); do
	case "$1" in
		--trace| --verbose)
			set -x
			shift 1 || break
			;;
			
		--help| -h)
			display_usage
			;;
			
		--version| -v)
			display_version
			;;
			
		init)
			if [ -f "$HERE/config/.openweathermap_apikey" ]; then
				api_key=$(sed -n '1p' < "$HERE/config/.openweathermap_apikey")
			else
				api_key=$OPENWEATHERMAP_APIKEY
			fi

			if [[ -z "${api_key}" || "$api_key" == "$OPENWEATHERMAP_APIKEY" ]]; then 
				echo "1"
				read -e -p "Enter your API key: " api_key
			fi

			if [ -f "$HERE/config/.default_city_id" ]; then
				city_id=$(sed -n '1p' < "$HERE/config/.default_city_id")
			else
				city_id="$WTSPEAK_DEFAULT_CITY_ID"
			fi

			if [[ -z "${city_id}" || "$city_id" == "$WTSPEAK_DEFAULT_CITY_ID" ]]; then 
				read -e -p "Enter your city ID: " city_id
			fi
			init
			exit $?
			;;

		*)
			shift 1 || break
			;;
			
	esac
done

# Exit if the environment variables are not defined
# TODO: Prompt the user for the API key and default city id/city name if the 
# environment variables are not defined
# [ -z "$OPENWEATHERMAP_APIKEY" ] && echo "API Key not defined" && exit 1; 
# [ -z "$api_key" ] && echo "API Key not defined" && exit 1; 
# # read -e -p 'Enter your OpenWeatherMap API key: ' "$OPENWEATHERMAP_APIKEY"
# [ -z "$WTSPEAK_DEFAULT_CITY_ID" ] && echo "Default city ID not defined" && exit 1;

weather_forecast_script=""
if [ "$afternoon" -gt 0 ]; then
	weather_forecast_script="This afternoon, the weather will be "
else 
	weather_forecast_script="Tomorrow, the weather will be "
fi

# This function adds an adjective succinctly describing the weather
# it's possible to use if/else on the resulting code id 
adjectify_description(){
	# remove the double-quotes
	weather_main_description="${weather_main_description//\"}"

	if [ "$weather_main_description" == "Clear" ]; then
		weather_forecast_script="$weather_forecast_script clear."

	elif [ "$weather_main_description" == "Rain" ]; then
		weather_forecast_script="$weather_forecast_script rainy."

	elif [ "$weather_main_description" == "Snow" ]; then
		weather_forecast_script="$weather_forecast_script snowy."

	elif [ "$weather_main_description" == "Thunderstorm" ]; then
		weather_forecast_script="$weather_forecast_script stormy."
	
	elif [ "$weather_main_description" == "Drizzle" ]; then
		weather_forecast_script="$weather_forecast_script drizzly."
	
	elif [ "$weather_main_description" == "Clouds" ]; then
		weather_forecast_script="$weather_forecast_script cloudy."
	
	elif [ "$weather_main_description" == "Atmosphere" ]; then
		weather_forecast_script="$weather_forecast_script atmospheric."
	
	elif [ "$weather_main_description" == "Extreme" ]; then
		weather_forecast_script="$weather_forecast_script extreme."
	fi
}

temperaturify_description(){
	weather_forecast_script="$weather_forecast_script Temperatures will\
	range from $weather_morning_temp degrees in the morning to\
	$weather_afternoon_temp degrees in the afternoon."
}

# returns the city coordinates based on the ip address
# <latitude> <longitude>
# (credits to http://askubuntu.com/a/430864)
get_coordinates_from_ip(){
	curl -s http://whatismycountry.com/ | sed -n 's/.*Coordinates \(.*\)<.*/\1/p'	
}

# returns the city and country name based on the ip adress
# <city>,<country>
get_city_country_from_ip(){
	curl -s http://whatismycountry.com/ | sed -n 's|.*> *\(.*\)</h3>|\1|p'
}

# Fetch weather from openweathermap
# $1 day offset: 0 means today, 1 tomorrow... etc
# TODO: factorize the calls to curl hereafter
curl_weather(){
	day_offset="$day_interval"
# 	day_offset="$1"
	weather_main_description=$(curl -s "$WEATHER_URL"|
	jq ".list[((11 - $day_offset))]| .weather[] .main")
	
	weather_full_description=$(curl -s "$WEATHER_URL"|
	jq ".list[$((11 - $day_offset))]| .weather[] .description")
	
	weather_code=$(curl -s "$WEATHER_URL"| jq '.cod')

	weather_morning_temp=$(curl -s "$WEATHER_URL"|
	jq ".list[((11 - $day_offset))]| .main.temp")

	weather_afternoon_temp=$(curl -s "$WEATHER_URL"|
	jq ".list[((11 - $day_offset + 2))]| .main.temp")

}

curl_weather 1
adjectify_description
temperaturify_description
$ESPEAK "$weather_forecast_script" &
